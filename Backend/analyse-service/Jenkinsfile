pipeline {
    agent any

    environment {
        DOCKER_HOST = "tcp://localhost:2375"
        DOCKER_TLS_VERIFY = '0'  // Disable TLS for local Docker connection
    }

    tools {
        maven 'Maven-4.0.0'
        jdk 'JDK17'  // Make sure you adjust to your actual JDK version
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the main branch from your GitHub repository
                git branch: 'main', url: 'https://github.com/LaboratoryProject/Laboratory_Project.git'
            }
        }

        stage('Build') {
            steps {
                // Navigate to the service folder and build the Spring Boot app (skip tests during build)
                dir('Backend/analyse-service') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Unit Tests') {
            steps {
                // Run unit tests using Maven
                dir('Backend/analyse-service') {
                    sh 'mvn test'
                }
            }
            post {
                always {
                    // Archive JUnit test reports generated after running unit tests
                    junit 'Backend/analyse-service/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Integration Tests') {
            steps {
                // Execute integration tests, assuming integration test profile is configured
                dir('Backend/analyse-service') {
                    sh 'mvn verify -Pintegration-tests'
                }
            }
        }

        stage('E2E Tests') {
            steps {
                // Run End-to-End tests using npm (make sure your E2E tests are set up with npm)
                dir('Backend/analyse-service') {
                    sh 'npm install'
                    sh 'npm run e2e'
                }
            }
        }

        stage('Docker Test') {
            steps {
                script {
                    // Test if Docker is accessible with the configured environment
                    sh 'docker ps'
                }
            }
        }
    }

    post {
        always {
            // Archive any JAR artifacts built during the build stage
            archiveArtifacts artifacts: 'Backend/analyse-service/target/*.jar', allowEmptyArchive: true
        }
        success {
            // Notify success in the logs
            echo 'Build was successful!'
        }
        failure {
            // Notify failure in the logs
            echo 'Build failed! Check the logs for details.'
        }
    }
}
